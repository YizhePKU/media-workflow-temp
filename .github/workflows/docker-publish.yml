name: Docker

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: musecr.azurecr.cn
  IMAGE_NAME: muse/muse-media-process-workflow

jobs:
  check:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: ruff-check
        uses: astral-sh/ruff-action@v2.0.0

      - name: ruff-format
        uses: astral-sh/ruff-action@v2
        with:
          args: "format --check"

  build:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  test:
    runs-on: ubuntu-24.04
    needs: build
    container:
      image: ${{ needs.build.outputs.tags }}
      credentials:
        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
    env:
      MEDIA_WORKFLOW_DATADIR: /tmp
      MEDIA_WORKFLOW_TEST_WEBHOOK: 1
      HONEYCOMB_KEY: ${{ secrets.HONEYCOMB_KEY }}
      TEMPORAL_SERVER_HOST: ${{ vars.TEMPORAL_SERVER_HOST }}
      TEMPORAL_NAMESPACE: ${{ vars.TEMPORAL_NAMESPACE }}
      TEMPORAL_TLS: 1
      LLM_BASE_URL: ${{ vars.LLM_BASE_URL }}
      LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
      S3_ENDPOINT_URL: ${{ vars.S3_ENDPOINT_URL }}
      S3_REGION: ${{ vars.S3_REGION }}
      S3_BUCKET: ${{ vars.S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      OPENCV_IO_ENABLE_OPENEXR: 1
    steps:
      - name: Reset $HOME back to /root
        run: echo HOME=/root >> "$GITHUB_ENV"

      - name: Start a Worker
        run: uv run python worker.py &
        working-directory: /app

      - name: Start a Webhook Worker
        run: uv run python webhook_worker.py &
        working-directory: /app

      - name: Run pytest
        run: uv run pytest -n 8
        working-directory: /app

  deploy:
    runs-on: ubuntu-24.04
    needs: [build, test]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - name: Setup Kubernetes Config And Update Deployment
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config
          kubectl --namespace media-process-workers set image deployment/media-process-worker worker=${{ needs.build.outputs.tags }}
          kubectl --namespace media-process-workers set image deployment/webhook-worker worker=${{ needs.build.outputs.tags }}

      - name: Wait for rollout to complete
        run: |
          export KUBECONFIG=$HOME/.kube/config
          kubectl --namespace media-process-workers rollout status deployment/media-process-worker
          kubectl --namespace media-process-workers rollout status deployment/webhook-worker
